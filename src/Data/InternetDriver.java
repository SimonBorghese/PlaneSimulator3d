/*
 * Copyright (c) 2025.
 * Created by Simon Borghese for CS 220
 * File created on 3/23/2025
 */

package Data;

import org.json.JSONException;
import org.json.JSONObject;

import javax.naming.ConfigurationException;
import javax.naming.LimitExceededException;
import java.io.*;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.security.InvalidParameterException;
import java.util.*;

import Math.Vector;

/**
 * This class is used for retrieving data from online sources, notably by storing relevant API keys and making requests
 */
public class InternetDriver {
    /**
     * Our primary HttpClient for reading from servers
     */
    private HttpClient httpClient;

    /**
     * Our Google API key, should only be accessed with this class, hense the private modifier
     */
    private String google_api_key;

    /**
     * Our session key for the 2D Tile API, this is required to initialize and interface with the API.
     * This is generated by this class and does not need to be supplied by the user
     */
    private String google_api_tile_session;

    /**
     * The resolution of the images returned by the Google API. We usually assume 256x256 but we should still
     * read the response.
     */
    private int tileWidth;
    private int tileHeight;

    /**
     * A special embedded constant, for debugging, to stop the program should the number of queries exceed a reasonable amount
     */
    private final static int MAX_ELEVATION_QUERIES = 100;
    /**
     * A special debugging value to inform a programmer how many queries they used in elevation
     */
    private static int num_queries_elevation = 0;

    /**
     * Construct this class using a provided Google API key from somewhere else in the program
     * @param google_key Our Google Cloud API Key
     */
    public InternetDriver(String google_key){
        httpClient = HttpClient.newHttpClient();
        google_api_tile_session = null;
        google_api_key = google_key;
    }

    /**
     * Construct this class by reading our APIs keys from specific files. This is a more secure way of doing things
     * since the APY key only touches this class within a private context.
     * This class should read from:
     * .google_api_key = google cloud API key
     */
    public InternetDriver() throws FileNotFoundException {
        // Read the Google API key
        FileReader google_reader = new FileReader(".google_api_key");
        Scanner google_scanner = new Scanner(google_reader);

        String google_key = google_scanner.next();

        // Throw an error if the key is not a reasonable length
        if (google_key.length() < 8){
            throw new FileNotFoundException("Found key was not a reasonable length");
        }

        google_api_key = google_key;
        google_api_tile_session = null;
        httpClient = HttpClient.newHttpClient();
    }

    /**
     * Initialize a connection to the Google 2D Tile API by generating a session. This method only needs to be called
     * once as we can assume the session will last the lifetime of the program (less than 2 weeks).
     * This method will always setup the API to return jpeg images.
     * @throws ConfigurationException If the Google API doesn't return a session
     */
    public void initializeTileSession() throws ConfigurationException {
        // Begin creating the JSON object
        // We hard code the parameters we need in this app
        JSONObject jsonQuery = new JSONObject();
        jsonQuery.put("mapType", "satellite");
        jsonQuery.put("language", "en-US");
        // If you're not in the US, I will be sad :(
        jsonQuery.put("region", "US");
        jsonQuery.put("imageFormat", "png");

        String read_session = PostJSONRequest(
                String.format("https://tile.googleapis.com/v1/createSession?key=%s", google_api_key),
                jsonQuery
        );

        JSONObject json_response = new JSONObject(read_session);

        try{
            google_api_tile_session = json_response.getString("session");

            tileWidth = json_response.getInt("tileWidth");
            tileHeight = json_response.getInt("tileHeight");
        } catch (JSONException e) {
            System.out.println("The Google Tile API didn't return a session!!");
            System.out.println("Did you provide a valid API key?");
            throw new ConfigurationException("The Google Tile API didn't return a valid response");
        }

        if (!json_response.getString("imageFormat").equalsIgnoreCase("png")){
            System.out.println("The Google Tile API isn't returning PNGs, please check for API limits!");

            throw new ConfigurationException("The Google Tile API isn't returning PNGs");
        }
    }

    /**
     * Download a JPEG (or really any format) satalight image from Google's Tile API
     * initializeTileSession() must be called before this
     * @return A byte array from the URL
     * @throws ConfigurationException If the Google API session token doesn't exist
     */
    public byte[] getSatalliteImage(Vector coords) throws ConfigurationException {
        if (google_api_tile_session == null){
            throw new ConfigurationException("Google Tile API session not initialized!");
        }

        return ReadBinaryFromURL(
                String.format(
                        "https://tile.googleapis.com/v1/2dtiles/%d/%d/%d?session=%s&key=%s",
                        (int) coords.getZ(), (int) coords.getX(), (int) coords.getY(), google_api_tile_session, google_api_key
                )
        );
    }



    /**
     * Read the raw JSON output from the Google Elevation API
     * It's important to query as many cords as possible at once as there is some latency in the response
     * @param cords A Hashmap of latitude and longitude coordinates (Must have less than 512 values)
     * @return The raw JSON from Google's server
     * @throws java.security.InvalidParameterException Thrown if cords has more than 512 key value pairs (A limit from Google's API)
     */
    public String getElevation(ArrayList<String> cords){
        if (cords.size() > 512){
            throw new InvalidParameterException("Too many coordinates provided!");
        }
        if (cords.size() % 2 != 0){
            throw new InvalidParameterException("Coordinates not valid (not divisible by 2)");
        }

        if (num_queries_elevation + cords.size() > MAX_ELEVATION_QUERIES){
            System.out.printf("[WARNING!!!!!!!!] There has been %d elevation queries from a limit of %d which, " +
                    "after this call will become %d queries!!!!!\n",
                    num_queries_elevation, MAX_ELEVATION_QUERIES, num_queries_elevation + cords.size());

            System.out.println("To continue, enter \"continue\" into the prompt below or \"quit\" to quit!");

            String input = "";
            Scanner scn = new Scanner(System.in);
            while (!input.equalsIgnoreCase("continue") && !input.equalsIgnoreCase("quit")){
                input = scn.next();
                // Skip to next line
                scn.nextLine();
            }

            if (input.equalsIgnoreCase("quit")){
                System.out.println("Exiting due to too many elevation queries!");
                System.exit(0);
            }
        }
        // Google defines a list of cords as "[Lat1],[Long1]|[Lat2],[Long2]|...[LatN],[LongN}"
        StringJoiner parameter_generation = new StringJoiner("%7C");
        for (int i = 0; i < cords.size(); i+=2){
            parameter_generation.add(String.format("%s,%s", cords.get(i), cords.get(i+1)));
        }

        // Construct the RESTful API request
        String built_url = String.format("https://maps.googleapis.com/maps/api/elevation/json?locations=%s&key=%s",
                parameter_generation.toString(), google_api_key);

        return ReadFromUrl(built_url);
    }

    /**
     * Read JSON from a URL
     * @param targetURL URL to read from
     * @return The request body
     */
    private String ReadFromUrl(String targetURL){
        // Create URL
        URI target_url = null;
        try {
            target_url = URI.create(targetURL);
        } catch (IllegalArgumentException e) {
            System.out.println("Malformed URL. This is most likely caused by the API key being malformed!");
            throw new RuntimeException("URL error, perhaps due to malformed API key!");
        }

        // Construct HTTP Request
        HttpRequest req = HttpRequest.newBuilder()
                .uri(target_url)
                .GET()
                .build();

        // Send the request
        HttpResponse<String> response = null;
        try {
            response = httpClient.send(req, HttpResponse.BodyHandlers.ofString());

            System.out.printf("Response code: %d\n", response.statusCode());
        } catch (UncheckedIOException | InterruptedException | IOException e) {
            System.out.println("Failed to read HTTP response");
            throw new RuntimeException(e);
        }

        return response.body();
    }

    /**
     * Read Binary from a URL
     * @param targetURL URL to read from
     * @return The request body
     */
    private byte[] ReadBinaryFromURL(String targetURL){
        // Create URL
        URI target_url = null;
        try {
            target_url = URI.create(targetURL);
        } catch (IllegalArgumentException e) {
            System.out.println("Malformed URL. This is most likely caused by the API key being malformed!");
            throw new RuntimeException("URL error, perhaps due to malformed API key!");
        }

        // Construct HTTP Request
        HttpRequest req = HttpRequest.newBuilder()
                .uri(target_url)
                .GET()
                .build();

        // Send the request
        HttpResponse<InputStream> response = null;
        try {
            response = httpClient.send(req, HttpResponse.BodyHandlers.ofInputStream());
            return response.body().readAllBytes();
        } catch (UncheckedIOException | InterruptedException | IOException e) {
            System.out.println("Failed to read HTTP response");
            throw new RuntimeException(e);
        }
    }

    /**
     * Post JSON data to a URL then read the result
     * @param targetURL URL to read from
     * @param targetJSON JSON to post to URL
     * @return The request body
     */
    private String PostJSONRequest(String targetURL, JSONObject targetJSON){
        // Create URL
        URI target_url = null;
        try {
            target_url = URI.create(targetURL);
        } catch (IllegalArgumentException e) {
            System.out.println("Malformed URL. This is most likely caused by the API key being malformed!");
            throw new RuntimeException("URL error, perhaps due to malformed API key!");
        }

        // Construct HTTP Request
        HttpRequest req = HttpRequest.newBuilder()
                .uri(target_url)
                .setHeader("Content-Type", "application/json")
                .POST(HttpRequest.BodyPublishers.ofString(targetJSON.toString()))
                .build();

        // Send the request
        HttpResponse<String> response;
        try {
            response = httpClient.send(req, HttpResponse.BodyHandlers.ofString());
        } catch (UncheckedIOException | InterruptedException | IOException e) {
            System.out.println("Failed to read HTTP response");
            throw new RuntimeException(e);
        }

        return response.body();
    }

    /**
     * Get the tile width, 0 if we haven't initialized the API
     * @return Width of returned tiles
     */
    public int getTileWidth() {
        return tileWidth;
    }

    /**
     * Get the tile height, 0 if we haven't initialized the API
     * @return Height of returned tiles
     */
    public int getTileHeight() {
        return tileHeight;
    }
}
